{"version":3,"file":"active-link.js","sources":["active-link.es6.js"],"sourcesContent":["/**\n * @file\n * Attaches behaviors for Drupal's active link marking.\n */\n\n(((Drupal, drupalSettings) => {\n  /**\n   * Append is-active class.\n   *\n   * The link is only active if its path corresponds to the current path, the\n   * language of the linked path is equal to the current language, and if the\n   * query parameters of the link equal those of the current request, since the\n   * same request with different query parameters may yield a different page\n   * (e.g. pagers, exposed View filters).\n   *\n   * Does not discriminate based on element type, so allows you to set the\n   * is-active class on any element: a, liâ€¦\n   *\n   * @type {Drupal~behavior}\n   */\n  Drupal.behaviors.activeLinks = {\n    attach(context) {\n      // Start by finding all potentially active links.\n      const path = drupalSettings.path;\n      const queryString = JSON.stringify(path.currentQuery);\n      const querySelector = path.currentQuery ? `[data-drupal-link-query='${queryString}']` : ':not([data-drupal-link-query])';\n      const originalSelectors = [`[data-drupal-link-system-path=\"${path.currentPath}\"]`];\n      let selectors;\n\n      // If this is the front page, we have to check for the <front> path as\n      // well.\n      if (path.isFront) {\n        originalSelectors.push('[data-drupal-link-system-path=\"<front>\"]');\n      }\n\n      // Add language filtering.\n      selectors = [].concat(\n        // Links without any hreflang attributes (most of them).\n        originalSelectors.map(selector => `${selector}:not([hreflang])`),\n        // Links with hreflang equals to the current language.\n        originalSelectors.map(selector => `${selector}[hreflang=\"${path.currentLanguage}\"]`),\n      );\n\n      // Add query string selector for pagers, exposed filters.\n      selectors = selectors.map(current => current + querySelector);\n\n      // Query the DOM.\n      const activeLinks = context.querySelectorAll(selectors.join(','));\n      const il = activeLinks.length;\n      for (let i = 0; i < il; i++) {\n        activeLinks[i].classList.add('is-active');\n      }\n    },\n    detach(context, settings, trigger) {\n      if (trigger === 'unload') {\n        const activeLinks = context.querySelectorAll('[data-drupal-link-system-path].is-active');\n        const il = activeLinks.length;\n        for (let i = 0; i < il; i++) {\n          activeLinks[i].classList.remove('is-active');\n        }\n      }\n    },\n  };\n}))(Drupal, drupalSettings);\n"],"names":["behaviors","activeLinks","path","drupalSettings","queryString","JSON","stringify","currentQuery","querySelector","originalSelectors","currentPath","selectors","isFront","push","concat","map","selector","currentLanguage","current","context","querySelectorAll","join","il","length","i","classList","add","trigger","remove","Drupal"],"mappings":"yBAKA,CAAE,aAA4B,GAerBA,UAAUC,YAAc,mBACb,IAERC,GAAOC,EAAeD,KACtBE,EAAcC,KAAKC,SAALD,CAAeH,EAAKK,YAApBF,EACdG,EAAgBN,EAAKK,YAALL,8BAAgDE,OAAhDF,CAAkE,iCAClFO,EAAoB,mCAAmCP,EAAKQ,gBAAxC,EACtBC,EAIAT,EAAKU,OAVK,IAWMC,KAAK,2CAXX,GAeF,GAAGC,MAAH,GAEQC,IAAI,kBAAeC,qBAArC,EAFU,GAIQD,IAAI,kBAAeC,gBAAAA,CAAsBd,EAAKe,eAA3BD,KAArC,EAJU,CAfE,GAuBFL,EAAUI,GAAVJ,CAAc,kBAAWO,GAAUV,CAAnC,CAAAG,CAvBE,KA4BT,GAFCV,GAAckB,EAAQC,gBAARD,CAAyBR,EAAUU,IAAVV,CAAe,GAAfA,CAAzBQ,CAEf,CADCG,EAAKrB,EAAYsB,MAClB,CAAIC,EAAI,EAAGA,EAAIF,EAAIE,MACVA,GAAGC,UAAUC,IAAI,YA9BJ,CAAA,uBAiCM,IACjB,QAAZC,SAGG,GAFC1B,GAAckB,EAAQC,gBAARD,CAAyB,0CAAzBA,CAEf,CADCG,EAAKrB,EAAYsB,MAClB,CAAIC,EAAI,EAAGA,EAAIF,EAAIE,MACVA,GAAGC,UAAUG,OAAO,aAtCT,CAfjC,CAAA,EA0DIC,MA1DJ,CA0DY1B,cA1DZ"}