{"version":3,"file":"announce.js","sources":["announce.es6.js"],"sourcesContent":["/**\n * @file\n * Adds an HTML element and method to trigger audio UAs to read system messages.\n *\n * Use {@link Drupal.announce} to indicate to screen reader users that an\n * element on the page has changed state. For instance, if clicking a link\n * loads 10 more items into a list, one might announce the change like this.\n *\n * @example\n * $('#search-list')\n *   .on('itemInsert', function (event, data) {\n *     // Insert the new items.\n *     $(data.container.el).append(data.items.el);\n *     // Announce the change to the page contents.\n *     Drupal.announce(Drupal.t('@count items added to @container',\n *       {'@count': data.items.length, '@container': data.container.title}\n *     ));\n *   });\n */\n\n(((Drupal, debounce) => {\n  let liveElement;\n  const announcements = [];\n\n  /**\n   * Builds a div element with the aria-live attribute and add it to the DOM.\n   *\n   * @type {Drupal~behavior}\n   *\n   * @prop {Drupal~behaviorAttach} attach\n   *   Attaches the behavior for drupalAnnouce.\n   */\n  Drupal.behaviors.drupalAnnounce = {\n    attach(context) {\n      // Create only one aria-live element.\n      if (!liveElement) {\n        liveElement = document.createElement('div');\n        liveElement.id = 'drupal-live-announce';\n        liveElement.className = 'visually-hidden';\n        liveElement.setAttribute('aria-live', 'polite');\n        liveElement.setAttribute('aria-busy', 'false');\n        document.body.appendChild(liveElement);\n      }\n    },\n  };\n\n  /**\n   * Concatenates announcements to a single string; appends to the live region.\n   */\n  function announce() {\n    const text = [];\n    let priority = 'polite';\n    let announcement;\n\n    // Create an array of announcement strings to be joined and appended to the\n    // aria live region.\n    const il = announcements.length;\n    for (let i = 0; i < il; i++) {\n      announcement = announcements.pop();\n      text.unshift(announcement.text);\n      // If any of the announcements has a priority of assertive then the group\n      // of joined announcements will have this priority.\n      if (announcement.priority === 'assertive') {\n        priority = 'assertive';\n      }\n    }\n\n    if (text.length) {\n      // Clear the liveElement so that repeated strings will be read.\n      liveElement.innerHTML = '';\n      // Set the busy state to true until the node changes are complete.\n      liveElement.setAttribute('aria-busy', 'true');\n      // Set the priority to assertive, or default to polite.\n      liveElement.setAttribute('aria-live', priority);\n      // Print the text to the live region. Text should be run through\n      // Drupal.t() before being passed to Drupal.announce().\n      liveElement.innerHTML = text.join('\\n');\n      // The live text area is updated. Allow the AT to announce the text.\n      liveElement.setAttribute('aria-busy', 'false');\n    }\n  }\n\n  /**\n   * Triggers audio UAs to read the supplied text.\n   *\n   * The aria-live region will only read the text that currently populates its\n   * text node. Replacing text quickly in rapid calls to announce results in\n   * only the text from the most recent call to {@link Drupal.announce} being\n   * read. By wrapping the call to announce in a debounce function, we allow for\n   * time for multiple calls to {@link Drupal.announce} to queue up their\n   * messages. These messages are then joined and append to the aria-live region\n   * as one text node.\n   *\n   * @param {string} text\n   *   A string to be read by the UA.\n   * @param {string} [priority='polite']\n   *   A string to indicate the priority of the message. Can be either\n   *   'polite' or 'assertive'.\n   *\n   * @return {function}\n   *   The return of the call to debounce.\n   *\n   * @see http://www.w3.org/WAI/PF/aria-practices/#liveprops\n   */\n  Drupal.announce = (text, priority) => {\n    // Save the text and priority into a closure variable. Multiple simultaneous\n    // announcements will be concatenated and read in sequence.\n    announcements.push({\n      text,\n      priority,\n    });\n    // Immediately invoke the function that debounce returns. 200 ms is right at\n    // the cusp where humans notice a pause, so we will wait\n    // at most this much time before the set of queued announcements is read.\n    return (debounce(announce, 200)());\n  };\n})(Drupal, Drupal.debounce));\n"],"names":["text","priority","announcement","il","announcements","length","i","pop","unshift","innerHTML","setAttribute","join","liveElement","behaviors","drupalAnnounce","document","createElement","id","className","body","appendChild","announce","push","debounce","Drupal"],"mappings":"yBAoBC,CAAC,aAAsB,aA6BF,KAQb,GAPCA,KAOD,CANDC,EAAW,QAMV,CALDC,QAKC,CADCC,EAAKC,EAAcC,MACpB,CAAIC,EAAI,EAAGA,EAAIH,EAAIG,MACPF,EAAcG,GAAdH,KACVI,QAAQN,EAAaF,MAGI,WAA1BE,KAAaD,aACJ,aAIXD,EAAKK,MAlBS,KAoBJI,UAAY,EApBR,GAsBJC,aAAa,YAAa,OAtBtB,GAwBJA,aAAa,YAAaT,EAxBtB,GA2BJQ,UAAYT,EAAKW,IAALX,CAAU,IAAVA,CA3BR,GA6BJU,aAAa,YAAa,QA7BtB,KA5BhBE,GACER,OAUCS,UAAUC,eAAiB,kBAChB,CAETF,CAFS,KAGEG,SAASC,aAATD,CAAuB,KAAvBA,CAHF,GAIAE,GAAK,sBAJL,GAKAC,UAAY,iBALZ,GAMAR,aAAa,YAAa,SAN1B,GAOAA,aAAa,YAAa,QAP1B,UAQHS,KAAKC,YAAYR,EARd,EADgB,CAZZ,GAoFfS,SAAW,aAAoB,UAGtBC,KAAK,OAAA,WAAA,GAOXC,EAASF,CAATE,CAAmB,GAAnBA,GAVV,CApFD,CAAA,EAgGEC,MAhGF,CAgGUA,OAAOD,QAhGjB"}