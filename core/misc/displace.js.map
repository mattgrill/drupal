{"version":3,"file":"displace.js","sources":["displace.es6.js"],"sourcesContent":["/**\n * @file\n * Manages elements that can offset the size of the viewport.\n *\n * Measures and reports viewport offset dimensions from elements like the\n * toolbar that can potentially displace the positioning of other elements.\n */\n\n/**\n * @typedef {object} Drupal~displaceOffset\n *\n * @prop {number} top\n * @prop {number} left\n * @prop {number} right\n * @prop {number} bottom\n */\n\n/**\n * Triggers when layout of the page changes.\n *\n * This is used to position fixed element on the page during page resize and\n * Toolbar toggling.\n *\n * @event drupalViewportOffsetChange\n */\n\n(($, Drupal, debounce) => {\n  /**\n   * @name Drupal.displace.offsets\n   *\n   * @type {Drupal~displaceOffset}\n   */\n  let offsets = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n  };\n\n  /**\n   * Calculates displacement for element based on its dimensions and placement.\n   *\n   * @param {HTMLElement} el\n   *   The jQuery element whose dimensions and placement will be measured.\n   *\n   * @param {string} edge\n   *   The name of the edge of the viewport that the element is associated\n   *   with.\n   *\n   * @return {number}\n   *   The viewport displacement distance for the requested edge.\n   */\n  const getRawOffset = (el, edge) => {\n    const $el = $(el);\n    const documentElement = document.documentElement;\n    let displacement = 0;\n    const horizontal = (edge === 'left' || edge === 'right');\n    // Get the offset of the element itself.\n    let placement = $el.offset()[horizontal ? 'left' : 'top'];\n    // Subtract scroll distance from placement to get the distance\n    // to the edge of the viewport.\n    placement -= window[`scroll${horizontal ? 'X' : 'Y'}`] || document.documentElement[`scroll${horizontal ? 'Left' : 'Top'}`] || 0;\n    // Find the displacement value according to the edge.\n    switch (edge) {\n      // Left and top elements displace as a sum of their own offset value\n      // plus their size.\n      case 'top':\n        // Total displacement is the sum of the elements placement and size.\n        displacement = placement + $el.outerHeight();\n        break;\n\n      case 'left':\n        // Total displacement is the sum of the elements placement and size.\n        displacement = placement + $el.outerWidth();\n        break;\n\n      // Right and bottom elements displace according to their left and\n      // top offset. Their size isn't important.\n      case 'bottom':\n        displacement = documentElement.clientHeight - placement;\n        break;\n\n      case 'right':\n        displacement = documentElement.clientWidth - placement;\n        break;\n\n      default:\n        displacement = 0;\n    }\n    return displacement;\n  };\n\n  /**\n   * Gets a specific edge's offset.\n   *\n   * Any element with the attribute data-offset-{edge} e.g. data-offset-top will\n   * be considered in the viewport offset calculations. If the attribute has a\n   * numeric value, that value will be used. If no value is provided, one will\n   * be calculated using the element's dimensions and placement.\n   *\n   * @function Drupal.displace.calculateOffset\n   *\n   * @param {string} edge\n   *   The name of the edge to calculate. Can be 'top', 'right',\n   *   'bottom' or 'left'.\n   *\n   * @return {number}\n   *   The viewport displacement distance for the requested edge.\n   */\n  const calculateOffset = (edge) => {\n    let edgeOffset = 0;\n    const displacingElements = document.querySelectorAll(`[data-offset-${edge}]`);\n    const n = displacingElements.length;\n    for (let i = 0; i < n; i++) {\n      const el = displacingElements[i];\n      if (el.style.display !== 'none') {\n        // If the offset data attribute contains a displacing value, use it.\n        let displacement = parseInt(el.getAttribute(`data-offset-${edge}`), 10);\n\n        // If the element's offset data attribute exits\n        // but is not a valid number then get the displacement\n        // dimensions directly from the element.\n        if (isNaN(displacement)) {\n          displacement = getRawOffset(el, edge);\n        }\n\n        // If the displacement value is larger than the current value for this\n        // edge, use the displacement value.\n        edgeOffset = Math.max(edgeOffset, displacement);\n      }\n    }\n\n    return edgeOffset;\n  };\n\n  /**\n   * Determines the viewport offsets.\n   *\n   * @return {Drupal~displaceOffset}\n   *   An object whose keys are the for sides an element -- top, right, bottom\n   *   and left. The value of each key is the viewport displacement distance for\n   *   that edge.\n   */\n  const calculateOffsets = () => ({\n    top: calculateOffset('top'),\n    right: calculateOffset('right'),\n    bottom: calculateOffset('bottom'),\n    left: calculateOffset('left'),\n  });\n\n  /**\n   * Informs listeners of the current offset dimensions.\n   *\n   * @function Drupal.displace\n   *\n   * @prop {Drupal~displaceOffset} offsets\n   *\n   * @param {bool} [broadcast]\n   *   When true or undefined, causes the recalculated offsets values to be\n   *   broadcast to listeners.\n   *\n   * @return {Drupal~displaceOffset}\n   *   An object whose keys are the for sides an element -- top, right, bottom\n   *   and left. The value of each key is the viewport displacement distance for\n   *   that edge.\n   *\n   * @fires event:drupalViewportOffsetChange\n   */\n  const displace = (broadcast) => {\n    offsets = calculateOffsets();\n    Drupal.displace.offsets = calculateOffsets();\n    if (typeof broadcast === 'undefined' || broadcast) {\n      $(document).trigger('drupalViewportOffsetChange', offsets);\n    }\n    return offsets;\n  };\n\n  /**\n   * Registers a resize handler on the window.\n   *\n   * @type {Drupal~behavior}\n   */\n  Drupal.behaviors.drupalDisplace = {\n    attach() {\n      // Mark this behavior as processed on the first pass.\n      if (this.displaceProcessed) {\n        return;\n      }\n      this.displaceProcessed = true;\n\n      $(window).on('resize.drupalDisplace', debounce(displace, 200));\n    },\n  };\n\n  /**\n   * Assign the displace function to a property of the Drupal global object.\n   *\n   * @ignore\n   */\n  Drupal.displace = displace;\n  $.extend(Drupal.displace, {\n\n    /**\n     * Expose offsets to other scripts to avoid having to recalculate offsets.\n     *\n     * @ignore\n     */\n    offsets,\n\n    /**\n     * Expose method to compute a single edge offsets.\n     *\n     * @ignore\n     */\n    calculateOffset,\n  });\n})(jQuery, Drupal, Drupal.debounce);\n"],"names":["offsets","getRawOffset","$el","$","el","documentElement","document","displacement","horizontal","edge","placement","offset","window","outerHeight","outerWidth","clientHeight","clientWidth","calculateOffset","edgeOffset","displacingElements","querySelectorAll","n","length","i","style","display","parseInt","getAttribute","isNaN","Math","max","calculateOffsets","displace","broadcast","trigger","behaviors","drupalDisplace","displaceProcessed","on","debounce","extend","Drupal","jQuery"],"mappings":"yBA0BA,CAAC,eAAyB,IAMpBA,GAAU,KACP,CADO,OAEL,CAFK,QAGJ,CAHI,MAIN,CAJM,EAoBRC,EAAe,aAAc,IAC3BC,GAAMC,EAAEC,CAAFD,EACNE,EAAkBC,SAASD,gBAC7BE,EAAe,EACbC,EAAuB,MAATC,MAA4B,OAATA,KAEnCC,EAAYR,EAAIS,MAAJT,GAAaM,EAAa,MAAbA,CAAsB,KAAnCN,YAGHU,iBAAgBJ,EAAa,GAAbA,CAAmB,IAAnCI,GAA6CN,SAASD,eAATC,WAAkCE,EAAa,MAAbA,CAAsB,MAAxDF,CAA7CM,EAAiH,IAKvH,QAHCH,EAKWC,EAAYR,EAAIW,WAAJX,GAGxB,SARCO,EAUWC,EAAYR,EAAIY,UAAJZ,GAKxB,WAfCO,EAgBWJ,EAAgBU,YAAhBV,CAA+BK,EAG3C,UAnBCD,EAoBWJ,EAAgBW,WAAhBX,CAA8BK,EAI9B,EAEZH,CArCT,EAyDMU,EAAkB,WAAU,KAI3B,MAHDC,EAAa,CAGZ,CAFCC,EAAqBb,SAASc,gBAATd,iBAA0CG,KAA1CH,CAEtB,CADCe,EAAIF,EAAmBG,MACxB,CAAIC,EAAI,EAAGA,EAAIF,EAAGE,SACVJ,EAAmBI,CAAnBJ,EACc,MAArBf,KAAGoB,KAAHpB,CAASqB,QAAoB,IAE3BlB,GAAemB,SAAStB,EAAGuB,YAAHvB,gBAA+BK,CAA/BL,CAATsB,CAAiD,EAAjDA,EAKfE,MAAMrB,CAANqB,CAP2B,KAQd3B,EAAaG,CAAbH,CAAiBQ,CAAjBR,CARc,IAalB4B,KAAKC,GAALD,CAASX,CAATW,CAAqBtB,CAArBsB,QAIVX,EAvBT,EAkCMa,EAAmB,iBAAO,KACzBd,EAAgB,KAAhBA,CADyB,OAEvBA,EAAgB,OAAhBA,CAFuB,QAGtBA,EAAgB,QAAhBA,CAHsB,MAIxBA,EAAgB,MAAhBA,CAJwB,CAAhC,EAyBMe,EAAW,WAAe,UACpBD,MACHC,SAAShC,QAAU+B,KACD,WAArB,QAAOE,EAAP,EAAoCA,MACpC3B,UAAU4B,QAAQ,6BAA8BlC,GAE7CA,CANT,IAcOmC,UAAUC,eAAiB,kBACvB,CAEH,KAAKC,iBAFF,QAKFA,oBALE,GAOLzB,QAAQ0B,GAAG,wBAAyBC,EAASP,CAATO,CAAmB,GAAnBA,EAP/B,EADuB,CA5JV,GA6KjBP,SAAWA,CA7KM,GA8KtBQ,OAAOC,EAAOT,SAAU,UAAA,kBAAA,EA9K5B,CAAA,EA8LGU,MA9LH,CA8LWD,MA9LX,CA8LmBA,OAAOF,QA9L1B"}