{"version":3,"file":"drupal.js","sources":["drupal.es6.js"],"sourcesContent":["/**\n * @file\n * Defines the Drupal JavaScript API.\n */\n\n/**\n * A jQuery object, typically the return value from a `$(selector)` call.\n *\n * Holds an HTMLElement or a collection of HTMLElements.\n *\n * @typedef {object} jQuery\n *\n * @prop {number} length=0\n *   Number of elements contained in the jQuery object.\n */\n\n/**\n * Variable generated by Drupal that holds all translated strings from PHP.\n *\n * Content of this variable is automatically created by Drupal when using the\n * Interface Translation module. It holds the translation of strings used on\n * the page.\n *\n * This variable is used to pass data from the backend to the frontend. Data\n * contained in `drupalSettings` is used during behavior initialization.\n *\n * @global\n *\n * @var {object} drupalTranslations\n */\n\n/**\n * Global Drupal object.\n *\n * All Drupal JavaScript APIs are contained in this namespace.\n *\n * @global\n *\n * @namespace\n */\nwindow.Drupal = { behaviors: {}, locale: {} };\n\n// JavaScript should be made compatible with libraries other than jQuery by\n// wrapping it in an anonymous closure.\n(((Drupal, drupalSettings, drupalTranslations) => {\n  /**\n   * Helper to rethrow errors asynchronously.\n   *\n   * This way Errors bubbles up outside of the original callstack, making it\n   * easier to debug errors in the browser.\n   *\n   * @param {Error|string} error\n   *   The error to be thrown.\n   */\n  Drupal.throwError = (error) => {\n    setTimeout(() => {\n      throw error;\n    }, 0);\n  };\n\n  /**\n   * Custom error thrown after attach/detach if one or more behaviors failed.\n   * Initializes the JavaScript behaviors for page loads and Ajax requests.\n   *\n   * @callback Drupal~behaviorAttach\n   *\n   * @param {HTMLDocument|HTMLElement} context\n   *   An element to detach behaviors from.\n   * @param {?object} settings\n   *   An object containing settings for the current context. It is rarely used.\n   *\n   * @see Drupal.attachBehaviors\n   */\n\n  /**\n   * Reverts and cleans up JavaScript behavior initialization.\n   *\n   * @callback Drupal~behaviorDetach\n   *\n   * @param {HTMLDocument|HTMLElement} context\n   *   An element to attach behaviors to.\n   * @param {object} settings\n   *   An object containing settings for the current context.\n   * @param {string} trigger\n   *   One of `'unload'`, `'move'`, or `'serialize'`.\n   *\n   * @see Drupal.detachBehaviors\n   */\n\n  /**\n   * @typedef {object} Drupal~behavior\n   *\n   * @prop {Drupal~behaviorAttach} attach\n   *   Function run on page load and after an Ajax call.\n   * @prop {Drupal~behaviorDetach} detach\n   *   Function run when content is serialized or removed from the page.\n   */\n\n  /**\n   * Holds all initialization methods.\n   *\n   * @namespace Drupal.behaviors\n   *\n   * @type {Object.<string, Drupal~behavior>}\n   */\n\n  /**\n   * Defines a behavior to be run during attach and detach phases.\n   *\n   * Attaches all registered behaviors to a page element.\n   *\n   * Behaviors are event-triggered actions that attach to page elements,\n   * enhancing default non-JavaScript UIs. Behaviors are registered in the\n   * {@link Drupal.behaviors} object using the method 'attach' and optionally\n   * also 'detach'.\n   *\n   * {@link Drupal.attachBehaviors} is added below to the `jQuery.ready` event\n   * and therefore runs on initial page load. Developers implementing Ajax in\n   * their solutions should also call this function after new page content has\n   * been loaded, feeding in an element to be processed, in order to attach all\n   * behaviors to the new content.\n   *\n   * Behaviors should use `var elements =\n   * $(context).find(selector).once('behavior-name');` to ensure the behavior is\n   * attached only once to a given element. (Doing so enables the reprocessing\n   * of given elements, which may be needed on occasion despite the ability to\n   * limit behavior attachment to a particular element.)\n   *\n   * @example\n   * Drupal.behaviors.behaviorName = {\n   *   attach: function (context, settings) {\n   *     // ...\n   *   },\n   *   detach: function (context, settings, trigger) {\n   *     // ...\n   *   }\n   * };\n   *\n   * @param {HTMLDocument|HTMLElement} [context=document]\n   *   An element to attach behaviors to.\n   * @param {object} [settings=drupalSettings]\n   *   An object containing settings for the current context. If none is given,\n   *   the global {@link drupalSettings} object is used.\n   *\n   * @see Drupal~behaviorAttach\n   * @see Drupal.detachBehaviors\n   *\n   * @throws {Drupal~DrupalBehaviorError}\n   */\n  Drupal.attachBehaviors = (context, settings) => {\n    context = context || document;\n    settings = settings || drupalSettings;\n    const behaviors = Drupal.behaviors;\n    // Execute all of them.\n    Object.keys(behaviors).forEach((key) => {\n      if (behaviors.hasOwnProperty(key) && typeof behaviors[key].attach === 'function') {\n        // Don't stop the execution of behaviors in case of an error.\n        try {\n          behaviors[key].attach(context, settings);\n        }\n        catch (e) {\n          Drupal.throwError(e);\n        }\n      }\n    });\n  };\n\n  /**\n   * Detaches registered behaviors from a page element.\n   *\n   * Developers implementing Ajax in their solutions should call this function\n   * before page content is about to be removed, feeding in an element to be\n   * processed, in order to allow special behaviors to detach from the content.\n   *\n   * Such implementations should use `.findOnce()` and `.removeOnce()` to find\n   * elements with their corresponding `Drupal.behaviors.behaviorName.attach`\n   * implementation, i.e. `.removeOnce('behaviorName')`, to ensure the behavior\n   * is detached only from previously processed elements.\n   *\n   * @param {HTMLDocument|HTMLElement} [context=document]\n   *   An element to detach behaviors from.\n   * @param {object} [settings=drupalSettings]\n   *   An object containing settings for the current context. If none given,\n   *   the global {@link drupalSettings} object is used.\n   * @param {string} [trigger='unload']\n   *   A string containing what's causing the behaviors to be detached. The\n   *   possible triggers are:\n   *   - `'unload'`: The context element is being removed from the DOM.\n   *   - `'move'`: The element is about to be moved within the DOM (for example,\n   *     during a tabledrag row swap). After the move is completed,\n   *     {@link Drupal.attachBehaviors} is called, so that the behavior can undo\n   *     whatever it did in response to the move. Many behaviors won't need to\n   *     do anything simply in response to the element being moved, but because\n   *     IFRAME elements reload their \"src\" when being moved within the DOM,\n   *     behaviors bound to IFRAME elements (like WYSIWYG editors) may need to\n   *     take some action.\n   *   - `'serialize'`: When an Ajax form is submitted, this is called with the\n   *     form as the context. This provides every behavior within the form an\n   *     opportunity to ensure that the field elements have correct content\n   *     in them before the form is serialized. The canonical use-case is so\n   *     that WYSIWYG editors can update the hidden textarea to which they are\n   *     bound.\n   *\n   * @throws {Drupal~DrupalBehaviorError}\n   *\n   * @see Drupal~behaviorDetach\n   * @see Drupal.attachBehaviors\n   */\n  Drupal.detachBehaviors = (context, settings, trigger) => {\n    context = context || document;\n    settings = settings || drupalSettings;\n    trigger = trigger || 'unload';\n    const behaviors = Drupal.behaviors;\n    // Execute all of them.\n    Object.keys(behaviors).forEach((key) => {\n      if (behaviors.hasOwnProperty(key) && typeof behaviors[key].detach === 'function') {\n        // Don't stop the execution of behaviors in case of an error.\n        try {\n          behaviors[key].detach(context, settings);\n        }\n        catch (e) {\n          Drupal.throwError(e);\n        }\n      }\n    });\n  };\n\n  /**\n   * Encodes special characters in a plain-text string for display as HTML.\n   *\n   * @param {string} str\n   *   The string to be encoded.\n   *\n   * @return {string}\n   *   The encoded string.\n   *\n   * @ingroup sanitization\n   */\n  Drupal.checkPlain = (str) => {\n    str = str.toString()\n      .replace(/&/g, '&amp;')\n      .replace(/\"/g, '&quot;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;');\n    return str;\n  };\n\n  /**\n   * Replaces placeholders with sanitized values in a string.\n   *\n   * @param {string} str\n   *   A string with placeholders.\n   * @param {object} args\n   *   An object of replacements pairs to make. Incidences of any key in this\n   *   array are replaced with the corresponding value. Based on the first\n   *   character of the key, the value is escaped and/or themed:\n   *    - `'!variable'`: inserted as is.\n   *    - `'@variable'`: escape plain text to HTML ({@link Drupal.checkPlain}).\n   *    - `'%variable'`: escape text and theme as a placeholder for user-\n   *      submitted content ({@link Drupal.checkPlain} +\n   *      `{@link Drupal.theme}('placeholder')`).\n   *\n   * @return {string}\n   *   The formatted string.\n   *\n   * @see Drupal.t\n   */\n  Drupal.formatString = (str, args) => {\n    // Keep args intact.\n    const processedArgs = {};\n    // Transform arguments before inserting them.\n    Object.keys(args).forEach((key) => {\n      if (args.hasOwnProperty(key)) {\n        switch (key.charAt(0)) {\n          // Escaped only.\n          case '@':\n            processedArgs[key] = Drupal.checkPlain(args[key]);\n            break;\n\n          // Pass-through.\n          case '!':\n            processedArgs[key] = args[key];\n            break;\n\n          // Escaped and placeholder.\n          default:\n            processedArgs[key] = Drupal.theme('placeholder', args[key]);\n            break;\n        }\n      }\n    });\n\n    return Drupal.stringReplace(str, processedArgs);\n  };\n\n  /**\n   * Replaces substring.\n   *\n   * The longest keys will be tried first. Once a substring has been replaced,\n   * its new value will not be searched again.\n   *\n   * @param {string} str\n   *   A string with placeholders.\n   * @param {object} args\n   *   Key-value pairs.\n   * @param {Array|null} keys\n   *   Array of keys from `args`. Internal use only.\n   *\n   * @return {string}\n   *   The replaced string.\n   */\n  Drupal.stringReplace = (str, args, keys = []) => {\n    if (str.length === 0) {\n      return str;\n    }\n\n    // If the array of keys is not passed then collect the keys from the args.\n    if (keys.length) {\n      keys = Object.keys(args)\n        .map(key => (args.hasOwnProperty(key) ? key : false))\n        // Remove falsy values from the array.\n        .filter(Boolean)\n        // Order the keys by the character length. The shortest one is the first.\n        .sort((a, b) => a.length - b.length);\n    }\n\n    if (keys.length === 0) {\n      return str;\n    }\n\n    // Take next longest one from the end.\n    const key = keys.pop();\n    const fragments = str.split(key);\n\n    if (keys.length) {\n      for (let i = 0; i < fragments.length; i++) {\n        // Process each fragment with a copy of remaining keys.\n        fragments[i] = Drupal.stringReplace(fragments[i], args, keys.slice(0));\n      }\n    }\n\n    return fragments.join(args[key]);\n  };\n\n  /**\n   * Translates strings to the page language, or a given language.\n   *\n   * See the documentation of the server-side t() function for further details.\n   *\n   * @param {string} str\n   *   A string containing the English text to translate.\n   * @param {Object.<string, string>} [args]\n   *   An object of replacements pairs to make after translation. Incidences\n   *   of any key in this array are replaced with the corresponding value.\n   *   See {@link Drupal.formatString}.\n   * @param {object} [options]\n   *   Additional options for translation.\n   * @param {string} [options.context='']\n   *   The context the source string belongs to.\n   *\n   * @return {string}\n   *   The formatted string.\n   *   The translated string.\n   */\n  Drupal.t = (str, args, options) => {\n    options = options || {};\n    options.context = options.context || '';\n\n    // Fetch the localized version of the string.\n    if (typeof drupalTranslations !== 'undefined' && drupalTranslations.strings && drupalTranslations.strings[options.context] && drupalTranslations.strings[options.context][str]) {\n      str = drupalTranslations.strings[options.context][str];\n    }\n\n    if (args) {\n      str = Drupal.formatString(str, args);\n    }\n    return str;\n  };\n\n  /**\n   * Returns the URL to a Drupal page.\n   *\n   * @param {string} path\n   *   Drupal path to transform to URL.\n   *\n   * @return {string}\n   *   The full URL.\n   */\n  Drupal.url = path => drupalSettings.path.baseUrl + drupalSettings.path.pathPrefix + path;\n\n  /**\n   * Returns the passed in URL as an absolute URL.\n   *\n   * @param {string} url\n   *   The URL string to be normalized to an absolute URL.\n   *\n   * @return {string}\n   *   The normalized, absolute URL.\n   *\n   * @see https://github.com/angular/angular.js/blob/v1.4.4/src/ng/urlUtils.js\n   * @see https://grack.com/blog/2009/11/17/absolutizing-url-in-javascript\n   * @see https://github.com/jquery/jquery-ui/blob/1.11.4/ui/tabs.js#L53\n   */\n  Drupal.url.toAbsolute = (url) => {\n    const urlParsingNode = document.createElement('a');\n\n    // Decode the URL first; this is required by IE <= 6. Decoding non-UTF-8\n    // strings may throw an exception.\n    try {\n      url = decodeURIComponent(url);\n    }\n    catch (e) {\n      // Empty.\n    }\n\n    urlParsingNode.setAttribute('href', url);\n\n    // IE <= 7 normalizes the URL when assigned to the anchor node similar to\n    // the other browsers.\n    return urlParsingNode.cloneNode(false).href;\n  };\n\n  /**\n   * Returns true if the URL is within Drupal's base path.\n   *\n   * @param {string} url\n   *   The URL string to be tested.\n   *\n   * @return {bool}\n   *   `true` if local.\n   *\n   * @see https://github.com/jquery/jquery-ui/blob/1.11.4/ui/tabs.js#L58\n   */\n  Drupal.url.isLocal = (url) => {\n    // Always use browser-derived absolute URLs in the comparison, to avoid\n    // attempts to break out of the base path using directory traversal.\n    let absoluteUrl = Drupal.url.toAbsolute(url);\n    let protocol = location.protocol;\n\n    // Consider URLs that match this site's base URL but use HTTPS instead of HTTP\n    // as local as well.\n    if (protocol === 'http:' && absoluteUrl.indexOf('https:') === 0) {\n      protocol = 'https:';\n    }\n    let baseUrl = `${protocol}//${location.host}${drupalSettings.path.baseUrl.slice(0, -1)}`;\n\n    // Decoding non-UTF-8 strings may throw an exception.\n    try {\n      absoluteUrl = decodeURIComponent(absoluteUrl);\n    }\n    catch (e) {\n      // Empty.\n    }\n    try {\n      baseUrl = decodeURIComponent(baseUrl);\n    }\n    catch (e) {\n      // Empty.\n    }\n\n    // The given URL matches the site's base URL, or has a path under the site's\n    // base URL.\n    return absoluteUrl === baseUrl || absoluteUrl.indexOf(`${baseUrl}/`) === 0;\n  };\n\n  /**\n   * Formats a string containing a count of items.\n   *\n   * This function ensures that the string is pluralized correctly. Since\n   * {@link Drupal.t} is called by this function, make sure not to pass\n   * already-localized strings to it.\n   *\n   * See the documentation of the server-side\n   * \\Drupal\\Core\\StringTranslation\\TranslationInterface::formatPlural()\n   * function for more details.\n   *\n   * @param {number} count\n   *   The item count to display.\n   * @param {string} singular\n   *   The string for the singular case. Please make sure it is clear this is\n   *   singular, to ease translation (e.g. use \"1 new comment\" instead of \"1\n   *   new\"). Do not use @count in the singular string.\n   * @param {string} plural\n   *   The string for the plural case. Please make sure it is clear this is\n   *   plural, to ease translation. Use @count in place of the item count, as in\n   *   \"@count new comments\".\n   * @param {object} [args]\n   *   An object of replacements pairs to make after translation. Incidences\n   *   of any key in this array are replaced with the corresponding value.\n   *   See {@link Drupal.formatString}.\n   *   Note that you do not need to include @count in this array.\n   *   This replacement is done automatically for the plural case.\n   * @param {object} [options]\n   *   The options to pass to the {@link Drupal.t} function.\n   *\n   * @return {string}\n   *   A translated string.\n   */\n  Drupal.formatPlural = (count, singular, plural, args, options) => {\n    args = args || {};\n    args['@count'] = count;\n\n    const pluralDelimiter = drupalSettings.pluralDelimiter;\n    const translations = Drupal\n      .t(singular + pluralDelimiter + plural, args, options)\n      .split(pluralDelimiter);\n    let index = 0;\n\n    // Determine the index of the plural form.\n    if (typeof drupalTranslations !== 'undefined' && drupalTranslations.pluralFormula) {\n      index = count in drupalTranslations.pluralFormula ?\n      drupalTranslations.pluralFormula[count] :\n      drupalTranslations.pluralFormula.default;\n    }\n    else if (args['@count'] !== 1) {\n      index = 1;\n    }\n\n    return translations[index];\n  };\n\n  /**\n   * Encodes a Drupal path for use in a URL.\n   *\n   * For aesthetic reasons slashes are not escaped.\n   *\n   * @param {string} item\n   *   Unencoded path.\n   *\n   * @return {string}\n   *   The encoded path.\n   */\n  Drupal.encodePath = item => window.encodeURIComponent(item).replace(/%2F/g, '/');\n\n  /**\n   * Generates the themed representation of a Drupal object.\n   *\n   * All requests for themed output must go through this function. It examines\n   * the request and routes it to the appropriate theme function. If the current\n   * theme does not provide an override function, the generic theme function is\n   * called.\n   *\n   * @example\n   * <caption>To retrieve the HTML for text that should be emphasized and\n   * displayed as a placeholder inside a sentence.</caption>\n   * Drupal.theme('placeholder', text);\n   *\n   * @namespace\n   *\n   * @param {function} func\n   *   The name of the theme function to call.\n   * @param {...args}\n   *   Additional arguments to pass along to the theme function.\n   *\n   * @return {string|object|HTMLElement|jQuery}\n   *   Any data the theme function returns. This could be a plain HTML string,\n   *   but also a complex object.\n   */\n  Drupal.theme = (func, ...args) => {\n    if (func in Drupal.theme) {\n      return Drupal.theme[func].apply(null, args);\n    }\n  };\n\n  /**\n   * Formats text for emphasized display in a placeholder inside a sentence.\n   *\n   * @param {string} str\n   *   The text to format (plain-text).\n   *\n   * @return {string}\n   *   The formatted text (html).\n   */\n  Drupal.theme.placeholder = str => `<em class=\"placeholder\">${Drupal.checkPlain(str)}</em>`;\n}))(Drupal, window.drupalSettings, window.drupalTranslations);\n"],"names":["window","Drupal","behaviors","locale","throwError","error","attachBehaviors","context","document","settings","drupalSettings","keys","forEach","hasOwnProperty","key","attach","e","detachBehaviors","trigger","detach","checkPlain","str","toString","replace","formatString","processedArgs","args","charAt","theme","stringReplace","length","Object","map","filter","Boolean","sort","a","b","pop","fragments","split","i","slice","join","t","options","drupalTranslations","strings","url","path","baseUrl","pathPrefix","toAbsolute","urlParsingNode","createElement","decodeURIComponent","setAttribute","cloneNode","href","isLocal","absoluteUrl","protocol","location","indexOf","host","formatPlural","count","pluralDelimiter","translations","singular","plural","index","pluralFormula","default","encodePath","encodeURIComponent","item","func","apply","placeholder"],"mappings":"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"}