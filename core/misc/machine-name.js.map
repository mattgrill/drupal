{"version":3,"file":"machine-name.js","sources":["machine-name.es6.js"],"sourcesContent":["/**\n * @file\n * Machine name functionality.\n */\n\n(($, Drupal, drupalSettings) => {\n  /**\n   * Attach the machine-readable name form element behavior.\n   *\n   * @type {Drupal~behavior}\n   *\n   * @prop {Drupal~behaviorAttach} attach\n   *   Attaches machine-name behaviors.\n   */\n  const MachineName = class MachineName {\n    constructor() {\n      this.xhr = null;\n      this.timeout = null;\n    }\n\n    /**\n     * Transliterate a human-readable name to a machine name.\n     *\n     * @param {string} source\n     *   A string to transliterate.\n     * @param {object} settings\n     *   The machine name settings for the corresponding field.\n     * @param {string} settings.replace_pattern\n     *   A regular expression (without modifiers) matching disallowed characters\n     *   in the machine name; e.g., '[^a-z0-9]+'.\n     * @param {string} settings.replace_token\n     *   A token to validate the regular expression.\n     * @param {string} settings.replace\n     *   A character to replace disallowed characters with; e.g., '_' or '-'.\n     * @param {number} settings.maxlength\n     *   The maximum length of the machine name.\n     *\n     * @return {jQuery}\n     *   The transliterated source string.\n     */\n    transliterate(source, settings) {\n      return $.get(Drupal.url('machine_name/transliterate'), {\n        text: source,\n        langcode: drupalSettings.langcode,\n        replace_pattern: settings.replace_pattern,\n        replace_token: settings.replace_token,\n        replace: settings.replace,\n        lowercase: true,\n      });\n    }\n\n    showMachineName(machine, data) {\n      const settings = data.options;\n      // Set the machine name to the transliterated value.\n      if (machine !== '') {\n        if (machine !== settings.replace) {\n          data.$target.val(machine);\n          data.$preview\n            .html(settings.field_prefix + Drupal.checkPlain(machine) + settings.field_suffix);\n        }\n        data.$suffix.show();\n      }\n      else {\n        data.$suffix.hide();\n        data.$target.val(machine);\n        data.$preview.empty();\n      }\n    }\n\n    clickEditHandler(e) {\n      const data = e.data;\n      data.$wrapper.removeClass('visually-hidden');\n      data.$target.trigger('focus');\n      data.$suffix.hide();\n      data.$source.off('.machineName');\n    }\n\n    machineNameHandler(e) {\n      const data = e.data;\n      const options = data.options;\n      const baseValue = $(e.target).val();\n\n      const rx = new RegExp(options.replace_pattern, 'g');\n      const expected = baseValue\n        .toLowerCase()\n        .replace(rx, options.replace)\n        .substr(0, options.maxlength);\n\n      // Abort the last pending request because the label has changed and it\n      // is no longer valid.\n      if (this.xhr && this.xhr.readystate !== 4) {\n        this.xhr.abort();\n        this.xhr = null;\n      }\n\n      // Wait 300 milliseconds for Ajax request since the last event to update\n      // the machine name i.e., after the user has stopped typing.\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n        this.timeout = null;\n      }\n      if (baseValue.toLowerCase() !== expected) {\n        this.timeout = setTimeout(() => {\n          Drupal.behaviors.machinename.xhr = Drupal.behaviors.machinename\n            .transliterate(baseValue, options)\n            .done((machine) => {\n              Drupal.behaviors.machinename\n                .showMachineName(machine.substr(0, options.maxlength), data);\n            });\n        }, 300);\n      }\n      else {\n        Drupal.behaviors.machinename.showMachineName(expected, data);\n      }\n    }\n\n    /**\n     * Attaches the behavior.\n     *\n     * @param {Element} context\n     *   The context for attaching the behavior.\n     * @param {object} settings\n     *   Settings object.\n     * @param {object} settings.machineName\n     *   A list of elements to process, keyed by the HTML ID of the form\n     *   element containing the human-readable value. Each element is an object\n     *   defining the following properties:\n     *   - target: The HTML ID of the machine name form element.\n     *   - suffix: The HTML ID of a container to show the machine name preview\n     *     in (usually a field suffix after the human-readable name\n     *     form element).\n     *   - label: The label to show for the machine name preview.\n     *   - replace_pattern: A regular expression (without modifiers) matching\n     *     disallowed characters in the machine name; e.g., '[^a-z0-9]+'.\n     *   - replace: A character to replace disallowed characters with; e.g.,\n     *     '_' or '-'.\n     *   - standalone: Whether the preview should stay in its own element\n     *     rather than the suffix of the source element.\n     *   - field_prefix: The #field_prefix of the form element.\n     *   - field_suffix: The #field_suffix of the form element.\n     */\n    attach(context, settings) {\n      const $context = $(context);\n\n      Object.keys(settings.machineName).forEach((sourceID) => {\n        let machine = '';\n        const options = settings.machineName[sourceID];\n        const $source = $context.find(sourceID).addClass('machine-name-source').once('machine-name');\n        const $target = $context.find(options.target).addClass('machine-name-target');\n        const $suffix = $context.find(options.suffix);\n        const $wrapper = $target.closest('.js-form-item');\n        // All elements have to exist.\n        if (!$source.length || !$target.length || !$suffix.length || !$wrapper.length) {\n          return;\n        }\n        // Skip processing upon a form validation error on the machine name.\n        if ($target.hasClass('error')) {\n          return;\n        }\n        // Figure out the maximum length for the machine name.\n        options.maxlength = $target.attr('maxlength');\n        // Hide the form item container of the machine name form element.\n        $wrapper.addClass('visually-hidden');\n        // Determine the initial machine name value. Unless the machine name\n        // form element is disabled or not empty, the initial default value is\n        // based on the human-readable form element value.\n        if ($target.is(':disabled') || $target.val() !== '') {\n          machine = $target.val();\n        }\n        else if ($source.val() !== '') {\n          machine = self.transliterate($source.val(), options);\n        }\n        // Append the machine name preview to the source field.\n        const $preview = $(`<span class=\"machine-name-value\">${options.field_prefix}${Drupal.checkPlain(machine)}${options.field_suffix}</span>`);\n        $suffix.empty();\n        if (options.label) {\n          $suffix.append(`<span class=\"machine-name-label\">${options.label}: </span>`);\n        }\n        $suffix.append($preview);\n\n        // If the machine name cannot be edited, stop further processing.\n        if ($target.is(':disabled')) {\n          return;\n        }\n\n        const eventData = {\n          $source,\n          $target,\n          $suffix,\n          $wrapper,\n          $preview,\n          options,\n        };\n        // If it is editable, append an edit link.\n        const $link = $(`<span class=\"admin-link\"><button type=\"button\" class=\"link\">${Drupal.t('Edit')}</button></span>`)\n          .on('click', eventData, this.clickEditHandler);\n        $suffix.append($link);\n\n        // Preview the machine name in realtime when the human-readable name\n        // changes, but only if there is no machine name yet; i.e., only upon\n        // initial creation, not when editing.\n        if ($target.val() === '') {\n          $source.on('formUpdated.machineName', eventData, this.machineNameHandler)\n            // Initialize machine name preview.\n            .trigger('formUpdated.machineName');\n        }\n\n        // Add a listener for an invalid event on the machine name input\n        // to show its container and focus it.\n        $target.on('invalid', eventData, this.clickEditHandler);\n      });\n    }\n  };\n\n  Drupal.behaviors.machinename = new MachineName();\n})(jQuery, Drupal, drupalSettings);\n"],"names":["MachineName","xhr","timeout","$","get","Drupal","url","source","drupalSettings","langcode","settings","replace_pattern","replace_token","replace","data","options","machine","$suffix","hide","$target","val","$preview","empty","html","field_prefix","checkPlain","field_suffix","show","e","$wrapper","removeClass","trigger","$source","off","baseValue","target","rx","RegExp","expected","toLowerCase","substr","maxlength","readystate","abort","behaviors","machinename","showMachineName","setTimeout","transliterate","done","$context","context","keys","machineName","forEach","sourceID","find","addClass","once","suffix","closest","length","hasClass","attr","is","self","label","append","eventData","$link","t","on","_this","clickEditHandler","machineNameHandler","jQuery"],"mappings":"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"}